# Translatable bundle properties
example_0_title = Empty Project
example_0_description = An empty TI-RTOS project

example_1_title = Empty (Minimal) Project
example_1_description = An empty TI-RTOS project with minimal footprint

example_2_title = Empty Project
example_2_description = An empty TI-RTOS project

example_3_title = Empty (Minimal) Project
example_3_description = An empty TI-RTOS project with minimal footprint

example_4_title = Empty Project
example_4_description = An empty TI-RTOS project

example_5_title = Empty (Minimal) Project
example_5_description = An empty TI-RTOS project with minimal footprint

example_6_title = Minimal
example_6_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_7_title = Typical
example_7_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dynamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_8_title = Typical (with separate config project)
example_8_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_9_title = Minimal
example_9_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_10_title = Typical
example_10_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dynamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_11_title = Typical (with separate config project)
example_11_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_12_title = Hello World
example_12_description = A basic example that logs a hello world string that can be viewed using System Analyzer.

example_13_title = Stairstep JTAG StopMode
example_13_description = The stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to present a CPU load to the system.  The Log data is obtained when the target is halted.  The sizes of the loggers in LoggingSetup might need to be decreased if your target does not have enough memory.

example_14_title = Hello World
example_14_description = A basic example that logs a hello world string that can be viewed using System Analyzer.

example_15_title = Stairstep JTAG StopMode
example_15_description = The stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to present a CPU load to the system.  The Log data is obtained when the target is halted.  The sizes of the loggers in LoggingSetup might need to be decreased if your target does not have enough memory.

