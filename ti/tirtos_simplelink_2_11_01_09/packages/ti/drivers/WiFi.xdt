%%{
/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== WiFi.xdt ========
 */

var WiFi = xdc.module('ti.drivers.WiFi');

%%}
%
% /*
%  *  The buffer size is calculated by the following:
%  *    max(MIN BUFFER SIZE, PAYLOAD SIZE + HCI HEADER SIZE + SPI HEADER SIZE
%  *                          + MAX ARG LENGTH + 1)
%  *  = max(119, WiFi.txPayloadSize + 5 + 5 + [24 + 16] + 1)
%  *  Note: The extra one byte is for overrun detection.
%  */
%  if (WiFi.txPayloadSize > (119 - 51))
%  {
    const int WiFi_TX_BUFFER_SIZE = `WiFi.txPayloadSize` + 51;
    unsigned char wlan_tx_buffer[`WiFi.txPayloadSize` + 51];
%  }
%  else {
    const int WiFi_TX_BUFFER_SIZE = 119;
    unsigned char wlan_tx_buffer[119];
%  }

%  if (WiFi.rxPayloadSize > (119 - 51))
%  {
    const int WiFi_RX_BUFFER_SIZE = `WiFi.rxPayloadSize` + 51;
    unsigned char wlan_rx_buffer[`WiFi.rxPayloadSize` + 51];
%  }
%  else {
    const int WiFi_RX_BUFFER_SIZE = 119;
    unsigned char wlan_rx_buffer[119];
%  }
%
% /* SelectThread priority used by multi-thread CC3000 Host Driver. */
    const int SELECT_THREAD_PRI = `WiFi.selectThreadPriority`;

% /* SpawnThread priority used by SimpleLink CC3100 Host Driver. */
    const int SPAWN_TASK_PRI = `WiFi.spawnTaskPriority`;
